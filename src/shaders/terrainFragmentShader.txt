#version 400 core

in vec2 pass_textureCoords;

in vec3 surfaceNormal;

in vec3 toLightVector;

in vec3 toCameraVector;
in float visibility;


out vec4 out_Colour;


//replace the sampler2d with the textures and the motherfucking blendmap
uniform sampler2D bg;
uniform sampler2D r;
uniform sampler2D g;
uniform sampler2D b;
uniform sampler2D blendMap;


uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;
<<<<<<< HEAD
=======

>>>>>>> 4c81eedc9f74daf48b3aea4ae6008a5d86c2d507


void main(void){
	
	//defines how much of each text we woulda render
	vec4 blendMapColour = texture(blendMap, pass_textureCoords);
	
	//calculate how much of the bg we want to render
	float backTextAmt = 1- (blendMapColour.r + blendMapColour.g + blendMapColour.b);
	//now we tile the mofo
	vec2  tiledCoords = pass_textureCoords * 40;
	
	//deides how much bg-ish the bg should be drawn at a certain point
	vec4 bgTexColour =  texture(bg,tiledCoords) * backTextAmt;
	
	//deides how much red-ish should be drawn at a certain point
	vec4 rTexColour =  texture(r,tiledCoords) * blendMapColour.r;
	
	//deides how much green-ish should be drawn at a certain point
	vec4 gTexColour =  texture(g,tiledCoords) * blendMapColour.g;
	
	//deides how much blue-ish should be drawn at a certain point
	vec4 bTexColour =  texture(b,tiledCoords) * blendMapColour.b;
	
	vec4 totalColour = bgTexColour + rTexColour + gTexColour + bTexColour;
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal,unitLightVector);
	float brightness = max(nDotl,0.2);
	vec3 diffuse = brightness * lightColour;
	
	vec3 unitToCamera = normalize(toCameraVector);
	
	vec3 lightDirection = -unitLightVector;
	
	vec3 reflectedLight = reflect(lightDirection,unitNormal);
	
	float specularFactor = dot(reflectedLight,unitToCamera);
	
	specularFactor = max(specularFactor,0.0);
	
	float dampedFactor = pow(specularFactor, shineDamper);
	
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;
	
<<<<<<< HEAD
	out_Colour = vec4(diffuse,1.0) * totalColour + vec4(finalSpecular,1.0);
=======
	out_Colour = vec4(diffuse,1.0) * texture(textureSampler,pass_textureCoords) + vec4(finalSpecular,1.0);
>>>>>>> 4c81eedc9f74daf48b3aea4ae6008a5d86c2d507
	out_Colour = mix(vec4(skyColour,1.0), out_Colour, visibility);
	
	
}