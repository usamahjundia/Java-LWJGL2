#version 400 core

in vec2 pass_textureCoords;

in vec3 surfaceNormal;

in vec3 toLightVector;

in vec3 toCameraVector;
in float visibility;


out vec4 out_Colour;

uniform sampler2D bg;
uniform sampler2D r;
uniform sampler2D g;
uniform sampler2D b;
uniform sampler2D blendMap;


uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;


void main(void){
	vec4 blendMapColour = texture(blendMap, pass_textureCoords);
	
	float backTextAmt = 1- (blendMapColour.r + blendMapColour.g + blendMapColour.b);
	vec2 tile = pass_textureCoords * 40.0;
	vec4 bgTexColour = texture(bg, tile)* backTextAmt;
	vec4 rTexColour = texture(r, tile)* blendMapColour.r;
	vec4 gTexColour = texture(g, tile)* blendMapColour.g;
	vec4 bTexColour = texture(b, tile)* blendMapColour.b;
	
	vec4 totalColour = bgTexColour + rTexColour + gTexColour + bTexColour;
	
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal,unitLightVector);
	float brightness = max(nDotl,0.2);
	vec3 diffuse = brightness * lightColour;
	
	vec3 unitToCamera = normalize(toCameraVector);
	
	vec3 lightDirection = -unitLightVector;
	
	vec3 reflectedLight = reflect(lightDirection,unitNormal);
	
	float specularFactor = dot(reflectedLight,unitToCamera);
	
	specularFactor = max(specularFactor,0.0);
	
	float dampedFactor = pow(specularFactor, shineDamper);
	
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;
	
	out_Colour = vec4(diffuse,1.0) * totalColour + vec4(finalSpecular,1.0);
	out_Colour = mix(vec4(skyColour,1.0), out_Colour, visibility);
	
	
}